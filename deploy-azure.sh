#!/bin/bash

# FX Rates System - Azure Deployment Script
# This script sets up all required Azure resources for the FX Rates system

set -e

# Configuration
RESOURCE_GROUP="fexco-fx-rates-rg"
LOCATION="eastus"
COSMOS_ACCOUNT="fexco-fx-rates-cosmos"
EVENTHUB_NAMESPACE="fexco-fx-rates-eh"
REDIS_NAME="fexco-fx-rates-redis"
AKS_CLUSTER="fexco-fx-rates-aks"
ACR_NAME="fexcofxratesacr"
APPINSIGHTS_NAME="fexco-fx-rates-insights"

echo "🚀 Starting Azure deployment for FX Rates System..."

# 1. Create Resource Group
echo "📦 Creating resource group..."
az group create --name $RESOURCE_GROUP --location $LOCATION

# 2. Deploy Cosmos DB
echo "🌍 Deploying Cosmos DB..."
az cosmosdb create \
  --name $COSMOS_ACCOUNT \
  --resource-group $RESOURCE_GROUP \
  --default-consistency-level Session \
  --locations regionName=$LOCATION failoverPriority=0 \
  --enable-automatic-failover true

# Create database and container
echo "📊 Creating Cosmos DB database and container..."
az cosmosdb sql database create \
  --account-name $COSMOS_ACCOUNT \
  --resource-group $RESOURCE_GROUP \
  --name fxrates

az cosmosdb sql container create \
  --account-name $COSMOS_ACCOUNT \
  --database-name fxrates \
  --name rates \
  --partition-key-path "/currencyPair" \
  --throughput 1000 \
  --resource-group $RESOURCE_GROUP

# Get Cosmos DB endpoint and key
COSMOS_ENDPOINT=$(az cosmosdb show --name $COSMOS_ACCOUNT --resource-group $RESOURCE_GROUP --query documentEndpoint -o tsv)
COSMOS_KEY=$(az cosmosdb keys list --name $COSMOS_ACCOUNT --resource-group $RESOURCE_GROUP --query primaryMasterKey -o tsv)

# 3. Deploy Event Hubs
echo "📨 Deploying Event Hubs..."
az eventhubs namespace create \
  --name $EVENTHUB_NAMESPACE \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --sku Standard \
  --capacity 2

az eventhubs eventhub create \
  --name fx-rates-updates \
  --namespace-name $EVENTHUB_NAMESPACE \
  --resource-group $RESOURCE_GROUP \
  --partition-count 4 \
  --message-retention 7

az eventhubs eventhub create \
  --name fx-rates-audit \
  --namespace-name $EVENTHUB_NAMESPACE \
  --resource-group $RESOURCE_GROUP \
  --partition-count 2

# Get Event Hub connection string
EVENTHUB_CONNECTION=$(az eventhubs namespace authorization-rule keys list \
  --resource-group $RESOURCE_GROUP \
  --namespace-name $EVENTHUB_NAMESPACE \
  --name RootManageSharedAccessKey \
  --query primaryConnectionString -o tsv)

# 4. Deploy Redis Cache
echo "🔴 Deploying Azure Cache for Redis..."
az redis create \
  --name $REDIS_NAME \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --sku Standard \
  --vm-size C1 \
  --enable-non-ssl-port false

# 5. Deploy Application Insights
echo "📊 Deploying Application Insights..."
az monitor app-insights component create \
  --app $APPINSIGHTS_NAME \
  --location $LOCATION \
  --resource-group $RESOURCE_GROUP \
  --kind web \
  --application-type web

APPINSIGHTS_KEY=$(az monitor app-insights component show \
  --app $APPINSIGHTS_NAME \
  --resource-group $RESOURCE_GROUP \
  --query instrumentationKey -o tsv)

# 6. Create Azure Container Registry
echo "🐳 Creating Azure Container Registry..."
az acr create \
  --resource-group $RESOURCE_GROUP \
  --name $ACR_NAME \
  --sku Standard \
  --admin-enabled true

# 7. Deploy AKS Cluster
echo "☸️  Deploying AKS cluster..."
az aks create \
  --name $AKS_CLUSTER \
  --resource-group $RESOURCE_GROUP \
  --node-count 3 \
  --node-vm-size Standard_D2s_v3 \
  --enable-cluster-autoscaler \
  --min-count 3 \
  --max-count 10 \
  --enable-managed-identity \
  --attach-acr $ACR_NAME \
  --enable-addons monitoring \
  --generate-ssh-keys

# Get AKS credentials
echo "🔐 Getting AKS credentials..."
az aks get-credentials \
  --name $AKS_CLUSTER \
  --resource-group $RESOURCE_GROUP \
  --overwrite-existing

# 8. Create Kubernetes secrets
echo "🔒 Creating Kubernetes secrets..."
kubectl create secret generic azure-secrets \
  --from-literal=cosmos-endpoint="$COSMOS_ENDPOINT" \
  --from-literal=cosmos-key="$COSMOS_KEY" \
  --from-literal=eventhub-connection-string="$EVENTHUB_CONNECTION" \
  --from-literal=appinsights-key="$APPINSIGHTS_KEY" \
  --dry-run=client -o yaml | kubectl apply -f -

# 9. Install KEDA
echo "📈 Installing KEDA for autoscaling..."
helm repo add kedacore https://kedacore.github.io/charts
helm repo update
helm install keda kedacore/keda --namespace keda --create-namespace || echo "KEDA already installed"

# 10. Save configuration to .env file
echo "💾 Saving configuration..."
cat > .env <<EOF
# Azure Configuration - Generated by deploy-azure.sh
COSMOS_ENDPOINT=$COSMOS_ENDPOINT
COSMOS_KEY=$COSMOS_KEY
COSMOS_DATABASE=fxrates

EVENTHUB_NAMESPACE=$EVENTHUB_NAMESPACE
EVENTHUB_CONNECTION_STRING=$EVENTHUB_CONNECTION

APPINSIGHTS_INSTRUMENTATIONKEY=$APPINSIGHTS_KEY
APPINSIGHTS_ENABLED=true

REDIS_HOST=$REDIS_NAME.redis.cache.windows.net
REDIS_PORT=6380
REDIS_SSL_ENABLED=true
EOF

echo ""
echo "✅ Azure deployment completed successfully!"
echo ""
echo "📋 Deployment Summary:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "Resource Group:      $RESOURCE_GROUP"
echo "Location:            $LOCATION"
echo "Cosmos DB:           $COSMOS_ACCOUNT"
echo "Event Hubs:          $EVENTHUB_NAMESPACE"
echo "Redis Cache:         $REDIS_NAME"
echo "AKS Cluster:         $AKS_CLUSTER"
echo "Container Registry:  $ACR_NAME"
echo "App Insights:        $APPINSIGHTS_NAME"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "📝 Next Steps:"
echo "1. Build and push Docker images:"
echo "   ./build-and-push.sh"
echo ""
echo "2. Deploy services to Kubernetes:"
echo "   kubectl apply -f k8s/base/"
echo ""
echo "3. Check deployment status:"
echo "   kubectl get pods"
echo ""
echo "4. Access services:"
echo "   kubectl port-forward svc/fx-rates-api-service 8080:80"
echo ""
echo "💰 Estimated Monthly Cost: ~\$150-200 (with free tier credits)"
